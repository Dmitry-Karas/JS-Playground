// #1. Подсчет очков
// Представьте, что вы играете в какую-нибудь игру со своими друзьями и вам нужно вести счет. Создайте для этого объект и назовите его scores. Пусть ключами будут имена ваших друзей, а значе- ниями — набранные ими очки (0 или больше). Счет игроков надо будет увеличивать по мере того, как они зарабатывают новые очки. Как вы будете менять счет игрока, хранящийся в объекте scores?

const scores = {
  Mango: 10,
  Poly: 12,
  Kiwi: 8,
  Ajax: 18,
};
// console.log('~ scores', scores);

const updateScore = (name, score) => {
  return (scores[name] += score);
};

updateScore('Mango', 5);
updateScore('Kiwi', 2);

// console.log('~ scores', scores);

// ==============================================================================

// #2. Вглубь объектов и массивов
// Пускай у вас есть такой объект:
// var myCrazyObject = {
// "name": "Нелепый объект",
// "some array": [7, 9, { purpose: "путаница", number: 123 }, 3.3], "random animal": "Банановая акула"
// };
// Как одной строкой JavaScript-кода извлечь из этого объекта число 123? Проверьте свое решение, запустив его в консоли.

const myCrazyObject = {
  name: 'Нелепый объект',
  'some array': [7, 9, { purpose: 'путаница', number: 123 }, 3.3],
  'random animal': 'Банановая акула',
};

// console.log(myCrazyObject['some array'][2].number);

// ==============================================================================
// Напишите программу с переменной name. Если в этой переменной находится ваше имя, напечатайте: «Привет мне!» — иначе напечатайте: «Привет, незнакомец!» (Подсказка: используйте === для сравнения переменной name с вашим именем.)
// Теперь дополните программу, чтобы она здоровалась с вашим папой, если в name его имя, и с вашей мамой, если в name ее имя. Если же там что-то иное, по-прежнему печатайте «Привет, незнакомец!».

const name = 'Tanya';

if (name === 'Dmitry') {
  console.log('hi to me');
} else if (name === 'Tanya') {
  // console.log('hi, Tanya');
} else {
  console.log('hi, stranger');
}
// ==============================================================================

// Напишите цикл for, который печатает степени тройки, не превышающие 10 000 (программа должна выводить 3, 9, 27 и т. д.)
// Перепишите это задание, вместо for использовав цикл while. (Подсказка: установите начальное значение перед входом в цикл.)

for (let i = 3; i < 10000; i = i * 3) {
  // console.log(i);
}

let degree = 3;

while (degree < 10000) {
  // console.log(degree);
  degree *= 3;
}
// ==============================================================================

// #1. Прекрасные животные
// Напишите цикл for, который изменяет массив животных, делая их прекрасными! Например, если есть следующий массив:
// var animals = ["Кот", "Рыба", "Лемур", "Комодский варан"]; то ваш цикл должен сделать его таким:
// ["Кот - прекрасное животное", "Рыба - прекрасное животное", "Лемур - прекрасное животное", "Комодский варан - прекрасное животное"]
// Подсказка: вам понадобится переприсвоить значения для каждого индекса, то есть присвоить новые значения уже существующим элементам. Например, сделать первое животное прекрасным можно так:
// animals[0] = animals[0] + " - прекрасное животное";

const animals = ['Кот', 'Рыба', 'Лемур', 'Комодский варан'];
// console.log('~ animals', animals);

for (let i = 0; i < animals.length; i++) {
  animals[i] = animals[i] + '- прекрасное животное';
}
// console.log('~ animals', animals);
// ==============================================================================

// #2. Генератор случайных строк
// Напишите генератор случайных строк. Для этого вам понадобится строка со всеми буквами алфавита:
// var alphabet = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя";
// Чтобы выбирать из этой строки случайную букву, можно использовать примерно такой же код, как для генератора случайных дразнилок из третьей главы: Math.floor(Math.random() * alphabet.length). Так вы получите случайный индекс в строке. Затем, воспользовавшись квадратными скобками, можно получить символ по этому индексу.
// Начните создавать случайную строку с пустой строки(var randomString = "").Затем добавьте цикл while и при каждом его повторе добавляйте в строку новый случайный символ — до тех пор, пока длина строки randomString не превысит шесть символов(или любой другой длины на ваш выбор).
// Добавлять символ в конец строки можно с помощью оператора +=. После того как цикл закончит работу, выведите получившуюся строку в консоль, чтобы полюбоваться на свое творение!

const alphabet = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя';
let randomString = '';

while (randomString.length <= 6) {
  const randomLetter = alphabet[Math.floor(Math.random() * alphabet.length)];
  randomString += randomLetter;
}

// console.log('~ randomString', randomString);

// ==============================================================================

// #3. h4ck3r sp34k
// Переведите англоязычный текст на «хакерский язык» (h4ck3r sp34k)! Многим в интернете нравится заменять некоторые буквы похожими на них числами — например, число «4» похоже на букву «A», «3» похоже на «E», «1» — на «I», а «0» — на «О». Хотя цифры напоминают скорее заглавные буквы, мы будем заменять ими буквы строчные. Чтобы перевести обычный текст на «хакерский язык», понадобится строка с исходным текстом и новая пустая строка для результата:
// var input = "javascript is awesome"; var output = "";
// Теперь воспользуйтесь циклом for, чтобы перебрать все символы исходной строки. Встретив букву «a», добавьте к результирующей строке «4». Встретив «e», добавьте «3», встретив «i», добавьте «1», а встретив «o» — «0». В противном случае просто добавляйте к результату исходный символ. И снова оператор += отлично подойдет для добавления символа в конец строки.
// После завершения цикла выведите результирующую строку в консоль. Если программа работает верно, вы должны увидеть следующее: "j4v4scr1pt 1s 4w3s0m3".
// h4ck3r sp34k — hacker speak — хакерский язык
// Input — входное значение
// Output — выходное значение
// JavasScript
// is awesome — JavaScript очень классный

const input = 'javascript is awesome';
let output = '';

for (let i = 0; i < input.length; i++) {
  const letter = input[i];

  if (letter === 'a') {
    output += 4;
  } else if (letter === 'e') {
    output += 3;
  } else if (letter === 'i') {
    output += 1;
  } else if (letter === 'o') {
    output += 0;
  } else {
    output += letter;
  }
}

// console.log('~ output', output);
// ==============================================================================

// #1. Математические расчеты и функции
// Создайте две функции, add и multiply; пусть каждая принимает по два аргумента. Функция add должна складывать аргументы и возвращать результат, а функция multiply — перемножать аргументы.
// С помощью только этих двух функций вычислите следующее несложное выражение:
// 36325 * 9824 + 777

const add = function (a, b) {
  return a + b;
};

const multiply = function (a, b) {
  return a * b;
};

// console.log(add(777, multiply(36325, 9824)));

// ==============================================================================

// #2. Совпадают ли массивы?
// Напишите функцию areArraysSame, которая принимает два массива с числами в качестве аргументов. Она должна возвра- щать true, если эти массивы одинаковые (то есть содержат одни и те же числа в одном и том же порядке), или false, если массивы различаются. Убедитесь, что ваша функция работает правильно, запустив такой код:
// Подсказка 1: вам понадобится перебрать все значения из первого массива в цикле for и убедиться, что они совпадают со значениями из второго массива. Вы можете вернуть false прямо из тела for, если обнаружите несовпадающие значения.
// Подсказка 2: вы можете сразу выйти из функции, пропустив цикл for, если у массивов разная длина.

const areArraysSame = function (arr1, arr2) {
  if (arr1.length !== arr2.length) {
    return false;
  }

  for (let i = 0; i < arr1.length; i++) {
    if (arr1[i] !== arr2[i]) {
      return false;
    }
    return true;
  }
};
// console.log(areArraysSame([1, 2, 3], [4, 5, 6]));
// false
// console.log(areArraysSame([1, 2, 3], [1, 2, 3]));
// true
// console.log(areArraysSame([1, 2, 3], [1, 2, 3, 4]));
// false

// ==============================================================================
